library(dplyr)
install.packages("nycflights13")
View(flights)
setwd("C:/Users/binca/Desktop/ch10-dplyr/exercise-4")
View(flights)
library(nycflights13)
View(flights)
?namecol
??namecol
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
print(paste(nrow(flights), "rows"))
print(paste(ncol(flights), "columns"))
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, change = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, change = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, change)
View(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights2 <- mutate(flights, change = arr_delay - dep_delay) %>%
arrange(flights, change)
View(flights2)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights2 <- mutate(flights, change = arr_delay - dep_delay) %>%
arrange(change)
View(flights2)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights2 <- mutate(flights, change = arr_delay - dep_delay) %>%
arrange(desc(change))
View(flights2)
View(flights2)
??hist()
?hist()
# Make a histogram of the amount of time gained using the `hist()` function
flights2 <- select(change > 0) %>%
hist(flights2)
styler:::style_active_file()
setwd("C:/Users/binca/Desktop/ch10-dplyr/exercise-4")
styler:::style_active_file()
install.packages("devtools")
devtools::install_github("jimhester/lintr")
lintr:::addin_lint()
setwd("C:/Users/binca/Desktop/ch10-dplyr/exercise-4")
lintr:::addin_lint()
